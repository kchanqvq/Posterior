@chapter Conversion from MIR to LIR

@section Register allocation

Assume that for each program point we maintain a set of
@emph{entries}.  Each entry corresponds to a lexical variable that is
@emph{live} at that program point.  An entry contains the following
information:

@itemize @bullet
@item The live variable itself.
@item A bitmap representing occupied stack locations.
@item An estimated @emph{distance} until it is going to be needed (in
  a register) next.
@item A set of locations where it is currently available.  This set is
  represented as a list.  An element of the set can be a specific
  register, or a specific stack location.  This set has at least one
  element in it.
@end itemize

There are two aspects to this technique.  The first aspect is the
computation of the estimated distance.  The second aspect is how
decisions are made to assign a lexical variable to a register and
which variable to no longer assign to a register when there are not
enough registers to go around.

We first consider the second problem, and discuss the first problem later.

Now let us assume that we have some register assignment A before
executing some instruction I.  We want to process this instruction and
determine a register assignment B after the execution if I.
Processing the instruction may involve altering it, but also perhaps
inserting new instructions before it and after it.

Let us assume that we have a MIR instruction of the form $c \leftarrow
a\thinspace op\thinspace b$, where $c$ is a lexical variable, and $a$,
and $b$ are either lexical variables or immediate inputs.  We further
assume that at least one of $a$ and $b$ is not an immediate input.
Our task is to generate one or more x86-style LIR instructions of the
form $x \leftarrow x\thinspace op\thinspace y$, where $x$ is a
register, and $y$ is either a register, an immediate input, or a stack
location.

\setlistdepth{20}

\newlist{legal}{enumerate}{20}
%\setlist[legal]{label*=\arabic*.}
\setlist[legal,1]{label=\arabic*.}
\setlist[legal,2]{label=\alph*.}
\setlist[legal,3]{label=\roman*.}
\setlist[legal,4]{label=\Alph*.}
\setlist[legal,5]{label=\Roman*.}
\setlist[legal,6]{label=\arabic*.}
\setlist[legal,7]{label=\alph*.}
\setlist[legal,8]{label=\roman*.}
\setlist[legal,9]{label=\Alph*.}
\renewlist{legal}{enumerate}{20}

First, the following steps are executed in order:

\begin{legal}
@item If $a$ is an immediate input, and $I$ is commutative, then $a$
  and $b$ are swapped.
@item If either:
  \begin{legal}
  @item $b$ is an immediate input,
  @item $b$ is already assigned to a register, or
    \begin{legal}
    @item $b$ is assigned only to a stack location,
    @item $I$ permits a memory location as its second operand, and
    @item either $b$ is dead after $I$ or the next use of $b$ is far
      in the future,
    \end{legal}
  \end{legal}
  then no further processing is done for $b$.
@item Otherwise, a new register, say $s$ is allocated for $b$ as a
  second operand.  An instruction is inserted that loads $b$ into $s$.
@item If either:
  \begin{legal}
  @item $a$ is an immediate input,
  @item $a$ is assigned only to a stack location and the next use of
    $a$ is far in the future, or
  @item $a$ is assigned only to a stack location and $a = c$,
  \end{legal}
  then a new register, say $r$, is allocated for $c$.  An instruction
  is inserted before $I$ that assigns $a$ to $r$.
@item Otherwise, $a$ and $b$ are both assigned to some registers say
  $r$ and $s$, respectively.  Then the instructions for that case are
  followed, as described below.
\end{legal}

Following are the instructions used when $a$ and $b$ are both assigned
to registers, say $r$ and $s$ respectively:

\begin{legal}
@item Either $a$, $b$ and $c$ are all distinct, or $a = b$, but $c$ is
  different.
  \begin{legal}
  @item $a$ is dead after $I$.  Then make $c$ be assigned to $r$
    after $I$.
  @item $a$ is live after $I$.
    \begin{legal}
    @item $a$ is needed soon after $I$.
      \begin{legal}
      @item $c$ is needed soon after $I$. Allocate a new register, say
        $t$, and assign it to $c$.  Insert an instruction before $I$
        that copies $r$ to $t$.
      @item $c$ is not needed soon after $I$.  Allocate a new
        register, say $t$, and assign it to $c$.  Insert an
        instruction before $I$ that copies $r$ to $t$.
      \end{legal}
    @item $a$ is not needed soon after $I$.
      \begin{legal}
      @item $a$ is also on the stack.  Reassign $r$ to $c$.
      @item $a$ is not on the stack.  Spill it, then reassign $r$ to
        $c$.
      \end{legal}
    \end{legal}
  \end{legal}
@item $a = c$, but $b$ is different, or $a = b = c$. Nothing needs to
  be done.
@item $b = c$, but $a$ is different.
  \begin{legal}
  @item $a$ is dead after $I$.  Reassign $r$ to $c$.
  @item $a$ is needed far in the future.
    \begin{legal}
    @item $a$ is also assigned to a stack location.  Reassign $r$ to $c$.
    @item $a$ is not assigned to a stack location.  Spill $a$ to a
      stack location.  Then reassign $r$ to $c$.
    \end{legal}
  @item $a$ is needed soon after $I$.  Allocate a new register, say
    $t$.  Insert an instruction to copy $r$ to $t$.  Assign $t$ to
    $a$.  Reassign $r$ to $c$.
  \end{legal}
\end{legal}
